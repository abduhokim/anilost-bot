import logging
import random
import asyncio
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# 🧠 Oddiy AI javoblar (demo uchun)
AI_RESPONSES = [
    "Qanday yordam bera olaman?",
    "Yaxshi savol. Buni o‘rganamiz!",
    "Men AIman, siz bilan suhbatlashishdan xursandman!",
    "Bu haqida o‘ylab ko‘raman :)"
]

# 🎞 Tasodifiy animelar ro‘yxati
ANIME_LIST = [
    {"title": "Jujutsu Kaisen", "episodes": 48, "movie": 1},
    {"title": "Attack on Titan", "episodes": 87, "movie": 0},
    {"title": "One Piece", "episodes": 1000, "movie": 15},
    {"title": "Naruto", "episodes": 720, "movie": 11},
    {"title": "Demon Slayer", "episodes": 44, "movie": 2}
]

# 🌸 Gulli tugmalar
main_buttons = ReplyKeyboardMarkup([
    ["🌸 Anime menyu", "🔍 Kod orqali qidirish"],
    ["🤖 AI qidiruv", "🎲 Tasodifiy anime"],
    ["🕵 Anonim suhbat"]
], resize_keyboard=True)

# 📓 Anonim chat juftlari
waiting_users = []
chat_pairs = {}

# 🚀 Boshlanish komandasi
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("👋 Salom! Bu Anime & AI Bot!", reply_markup=main_buttons)

# 🎲 Tasodifiy anime chiqarish
async def random_anime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    anime = random.choice(ANIME_LIST)
    msg = (
        f"🎞 <b>Anime nomi:</b> <i>{anime['title']}</i>\n"
        f"📺 <b>Qismlari:</b> <i>{anime['episodes']}</i>\n"
        f"🎬 <b>Filmlar soni:</b> <i>{anime['movie']}</i>"
    )
    await update.message.reply_text(msg, parse_mode="HTML")

# 🤖 AI javobi
async def ai_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("🤖 " + random.choice(AI_RESPONSES))

# 📥 Kod orqali qidirish
async def code_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("🔍 Kodni yuboring, izlab beraman!")

# 🎛 Anime menyusi
async def anime_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "\n".join([f"{i+1}. {anime['title']}" for i, anime in enumerate(ANIME_LIST)])
    await update.message.reply_text("🎌 Mashhur animelar:\n" + text)

# 🕵 Anonim chat boshlash
async def anonymous_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in chat_pairs:
        await update.message.reply_text("✅ Siz allaqachon anonim suhbatdasiz.")
        return
    if waiting_users:
        partner_id = waiting_users.pop(0)
        chat_pairs[user_id] = partner_id
        chat_pairs[partner_id] = user_id
        await context.bot.send_message(partner_id, "✅ Sizga suhbatdosh topildi!")
        await update.message.reply_text("✅ Sizga suhbatdosh topildi!")
    else:
        waiting_users.append(user_id)
        await update.message.reply_text("⏳ Suhbatdosh qidirilmoqda...")

# 💬 Xabar uzatish anonim chatda
async def relay_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in chat_pairs:
        partner_id = chat_pairs[user_id]
        await context.bot.send_message(partner_id, update.message.text)

# 🛠 Asosiy funksiyalar
async def main():
    import os
    TOKEN = os.environ.get("BOT_TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("Anime menyu"), anime_menu))
    app.add_handler(MessageHandler(filters.Regex("Kod orqali qidirish"), code_search))
    app.add_handler(MessageHandler(filters.Regex("AI qidiruv"), ai_response))
    app.add_handler(MessageHandler(filters.Regex("Tasodifiy anime"), random_anime))
    app.add_handler(MessageHandler(filters.Regex("Anonim suhbat"), anonymous_chat))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), relay_message))

    print("✅ Bot ishga tushdi...")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
